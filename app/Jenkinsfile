pipeline {
     agent any
     environment {
         DOCKER_IMAGE = "my-flask-app"  // Dynamic image name using build tag or branch
           DOCKER_BUILDKIT = '1' 
     }
 
     stages {
         stage('Clone Repository') {
             steps {
 
                git branch: 'main', url:'https://github.com/ShrutiBhapkar/Devops-projects.git'
             }
         }
 
 
         stage('login Docker Hub') {
             steps {
                 withCredentials([usernamePassword(credentialsId: 'docker-hub-credens', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                      bat """
                       echo Logging into Docker Hub...
                        docker logout
                        docker login --username %DOCKER_USERNAME% --password %DOCKER_PASSWORD%
                        if %ERRORLEVEL% NEQ 0 (
                            echo Docker login failed!
                            exit /b 1
                        ) else (
                            echo Docker login successful!
                        )
                        set DOCKER_BUILDKIT=1
                 
                    docker build -t %DOCKER_IMAGE% -f app/Dockerfile app
                   
                  docker tag %DOCKER_IMAGE% %DOCKER_USERNAME%/%DOCKER_IMAGE%:%BUILD_NUMBER%
                   
                    docker push %DOCKER_USERNAME%/%DOCKER_IMAGE%:%BUILD_NUMBER%
                     """
                 }
             }
         }


         stage('Deploy to Kubernetes') {
             steps {
                 script {
    // Optional debug step
    bat 'dir app\\K8s'

    def updatedYaml = readFile('app/K8s/deployment.yaml')
                        .replace('{{IMAGE_NAME}}', env.DOCKER_IMAGE)

    writeFile file: 'app/K8s/deployment-temp.yaml', text: updatedYaml

    bat 'kubectl apply -f app\\K8s\\deployment-temp.yaml'
    bat 'del app\\K8s\\deployment-temp.yaml'
}

             }
         }
     }
 }
