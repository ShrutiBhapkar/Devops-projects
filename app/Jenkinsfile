pipeline {
     agent any
     environment {
         DOCKER_IMAGE = "flask-app-demo"  // Dynamic image name using build tag or branch
           DOCKER_BUILDKIT = '1' 
           KUBECONFIG = 'C:\\Users\\123\\.kube\\config'  // Adjust as needed
     }
 
     stages {
         stage('Clone Repository') {
             steps {
 
                git branch: 'main', url:'https://github.com/ShrutiBhapkar/Devops-projects.git'
             }
         }
 
 
         stage('login Docker Hub') {
             steps {
                 withCredentials([usernamePassword(credentialsId: 'docker-hub-credens', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                      bat """
                       echo Logging into Docker Hub...
                        docker logout
                        docker login --username %DOCKER_USERNAME% --password %DOCKER_PASSWORD%
                        if %ERRORLEVEL% NEQ 0 (
                            echo Docker login failed!
                            exit /b 1
                        ) else (
                            echo Docker login successful!
                        )
                        set DOCKER_BUILDKIT=1
                 
                    docker build -t %DOCKER_IMAGE% -f app/Dockerfile app
                   
                  docker tag %DOCKER_IMAGE% %DOCKER_USERNAME%/%DOCKER_IMAGE%:latest
                   
                    docker push %DOCKER_USERNAME%/%DOCKER_IMAGE%:latest
                     """
                 }
             }
         }


         stage('Deploy to Kubernetes') {
             steps {
                script {
    // Base Docker image name (without the tag)
    env.DOCKER_IMAGE = "flask-app-demo"

    // Get the system name using uname (this will give you "Linux", "Darwin", etc.)
    def unameValue = "shru940"

    // Define the tag as 'latest'
                     
    def tag = "latest"  // You want this to always be 'latest'

    // Combine uname (system name), base image, and the 'latest' tag into the full Docker image tag
    def fullImage = "${unameValue}/${env.DOCKER_IMAGE}:${tag}"  // Example: "Linux:my-flask-app:latest"

    // Debugging: Verify the full Docker image path
    echo "Full Docker Image: ${fullImage}"  // Should print something like "Linux:my-flask-app:latest"
    
    // Read the YAML file and replace the placeholder with the full image tag
    def updatedYaml = readFile('app/K8s/deployment.yaml')
                          .replace('{{IMAGE_NAME}}', fullImage)
    
    // Debugging: Print the updated YAML to verify the change
    echo "Updated YAML:\n${updatedYaml}"
    
    // Check kubectl version
                     bat 'echo %KUBECONFIG%'
                     //configfile
                bat 'kubectl config view'
                     //details
                    bat 'kubectl version'

                    // List namespaces to confirm the namespace exists
                    bat 'kubectl get namespaces'

                    // Check if the namespace has any existing resources
                    bat 'kubectl get all -n your-namespace'

                    // List the files in the app/K8s directory to ensure deployment.yaml exists
                    bat 'dir app\\K8s'

                     // Apply the Kubernetes deployment
                    bat 'kubectl apply -f app/K8s/deployment-temp.yaml -n namespace1 -v 9'

 
   
}

             }
         }
     }
 }
